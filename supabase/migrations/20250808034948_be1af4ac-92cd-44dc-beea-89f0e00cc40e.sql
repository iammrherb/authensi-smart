-- Seed core Resource Library taxonomy and datasets
-- 1) Catalog categories (id autogenerated)
INSERT INTO public.catalog_categories (key, name, description, display_order)
SELECT v.key, v.name, v.description, v.display_order
FROM (
  VALUES
    ('wired_wireless','Wired & Wireless Network','Switches, Wireless LAN, Routers', 10),
    ('firewall','Firewalls','Network firewalls and NGFW platforms', 20),
    ('vpn_ztna','VPN & ZTNA','Remote access VPN and Zero Trust Network Access', 30),
    ('nac','NAC / Zero Trust','Network Access Control platforms', 40),
    ('siem','SIEM','Security Information and Event Management', 50),
    ('mdm_uem','MDM / UEM','Mobile Device and Unified Endpoint Management', 60),
    ('edr_xdr','EDR / XDR','Endpoint and Extended Detection & Response', 70),
    ('idp','Identity Providers','Identity providers and directories', 80),
    ('sso','SSO','Single Sign-On platforms', 90),
    ('cloud_security','Cloud Security','Cloud security posture and identity', 100)
) AS v(key,name,description,display_order)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_categories c WHERE c.key = v.key
);

-- 2) Helper: upsert catalog item if not exists by (category_key, name, model)
-- Note: no unique constraints, so we guard by WHERE NOT EXISTS

-- Wired & Wireless
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('wired_wireless','Cisco Catalyst 9300','Cisco','C9300','17.9.4', '["switch","enterprise","ios-xe"]'::jsonb, '{"series":"Catalyst 9000","features":["802.1X","MAB","SDA"]}'::jsonb, true, now()),
    ('wired_wireless','Cisco Catalyst 9500','Cisco','C9500','17.9.4', '["core","switch","ios-xe"]'::jsonb, '{"series":"Catalyst 9000","features":["MPLS","EVPN","802.1X"]}'::jsonb, true, now()),
    ('wired_wireless','Aruba CX 6300','HPE Aruba','6300','10.13', '["switch","arubaos-cx","access"]'::jsonb, '{"features":["802.1X","MAB","NetEdit"]}'::jsonb, true, now()),
    ('wired_wireless','Aruba AP-535','HPE Aruba','AP-535','8.11', '["wireless","wifi6","campus"]'::jsonb, '{"features":["802.1X","WPA3","AirMatch"]}'::jsonb, true, now()),
    ('wired_wireless','Juniper EX4300','Juniper','EX4300','18.4', '["switch","juniper","campus"]'::jsonb, '{"features":["802.1X","MACsec"]}'::jsonb, true, now()),
    ('wired_wireless','Ruckus R750','Ruckus','R750','6.1', '["wireless","wifi6","ruckus-os"]'::jsonb, '{"features":["DPSK","WISPr","WPA3"]}'::jsonb, true, now()),
    ('wired_wireless','Extreme X465','Extreme Networks','X465','31.7', '["switch","extremeos","edge"]'::jsonb, '{"features":["802.1X","Policy"]}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c 
  WHERE c.category_key=v.category_key AND c.name=v.name AND COALESCE(c.model,'')=COALESCE(v.model,'')
);

-- Firewalls
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('firewall','Palo Alto Networks PA-3220','Palo Alto Networks','PA-3220','11.0', '["ngfw","pan-os"]'::jsonb, '{"features":["App-ID","User-ID","GlobalProtect"]}'::jsonb, true, now()),
    ('firewall','Fortinet FortiGate 100F','Fortinet','FG-100F','7.4', '["ngfw","fortios"]'::jsonb, '{"features":["EMS","SSL Inspection"]}'::jsonb, true, now()),
    ('firewall','Cisco Firepower 2110','Cisco','FPR-2110','7.4', '["ngfw","ftd"]'::jsonb, '{"features":["FMC","AnyConnect"]}'::jsonb, true, now()),
    ('firewall','Check Point Quantum 6200','Check Point','6200','R81.20', '["ngfw","gaia"]'::jsonb, '{"features":["Identity Awareness","Harmony"]}'::jsonb, true, now()),
    ('firewall','Sophos XGS 2100','Sophos','XGS 2100','20.0', '["ngfw","sfos"]'::jsonb, '{"features":["Intercept X","SSL"]}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c 
  WHERE c.category_key=v.category_key AND c.name=v.name AND COALESCE(c.model,'')=COALESCE(v.model,'')
);

-- VPN & ZTNA
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('vpn_ztna','Palo Alto Prisma Access','Palo Alto Networks',NULL,NULL, '["ztna","sase"]'::jsonb, '{"type":"cloud"}'::jsonb, true, now()),
    ('vpn_ztna','Zscaler ZPA','Zscaler',NULL,NULL, '["ztna","sase"]'::jsonb, '{"type":"cloud"}'::jsonb, true, now()),
    ('vpn_ztna','Cisco Secure Client (AnyConnect)','Cisco',NULL,NULL, '["vpn","client"]'::jsonb, '{"supports":"ASA/FTD"}'::jsonb, true, now()),
    ('vpn_ztna','Fortinet FortiClient EMS','Fortinet',NULL,NULL, '["vpn","ztna"]'::jsonb, '{"supports":"FortiGate"}'::jsonb, true, now()),
    ('vpn_ztna','Cloudflare Zero Trust','Cloudflare',NULL,NULL, '["ztna","gateway"]'::jsonb, '{"type":"cloud"}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c 
  WHERE c.category_key=v.category_key AND c.name=v.name
);

-- NAC
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('nac','Cisco ISE','Cisco',NULL,'3.2', '["nac","policy"]'::jsonb, '{"features":["802.1X","Posture","Profiler"]}'::jsonb, true, now()),
    ('nac','Aruba ClearPass Policy Manager','HPE Aruba',NULL,'6.11', '["nac","policy"]'::jsonb, '{"features":["802.1X","OnGuard","Guest"]}'::jsonb, true, now()),
    ('nac','Forescout Platform','Forescout',NULL,NULL, '["nac","visibility"]'::jsonb, '{"features":["802.1X","Agentless","Segmentation"]}'::jsonb, true, now()),
    ('nac','Portnox Cloud','Portnox',NULL,NULL, '["nac","cloud"]'::jsonb, '{"features":["802.1X","Device Trust","MFA"]}'::jsonb, true, now()),
    ('nac','FortiNAC','Fortinet',NULL,NULL, '["nac"]'::jsonb, '{"features":["802.1X","Fortinet Integration"]}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c 
  WHERE c.category_key=v.category_key AND c.name=v.name
);

-- SIEM
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('siem','Splunk Enterprise Security','Splunk',NULL,NULL, '["siem","analytics"]'::jsonb, '{"type":"software"}'::jsonb, true, now()),
    ('siem','Microsoft Sentinel','Microsoft',NULL,NULL, '["siem","cloud"]'::jsonb, '{"type":"cloud"}'::jsonb, true, now()),
    ('siem','IBM QRadar','IBM',NULL,NULL, '["siem"]'::jsonb, '{"type":"appliance"}'::jsonb, true, now()),
    ('siem','Elastic Security','Elastic',NULL,NULL, '["siem","elastic"]'::jsonb, '{"type":"stack"}'::jsonb, true, now()),
    ('siem','Sumo Logic Cloud SIEM','Sumo Logic',NULL,NULL, '["siem","cloud"]'::jsonb, '{"type":"cloud"}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c WHERE c.category_key=v.category_key AND c.name=v.name
);

-- MDM/UEM
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('mdm_uem','Microsoft Intune','Microsoft',NULL,NULL, '["uem","mdm"]'::jsonb, '{"platforms":["Windows","iOS","Android","macOS"]}'::jsonb, true, now()),
    ('mdm_uem','Jamf Pro','Jamf',NULL,NULL, '["mdm","apple"]'::jsonb, '{"platforms":["macOS","iOS","iPadOS"]}'::jsonb, true, now()),
    ('mdm_uem','VMware Workspace ONE UEM','VMware',NULL,NULL, '["uem","mdm"]'::jsonb, '{"platforms":["Windows","iOS","Android","macOS"]}'::jsonb, true, now()),
    ('mdm_uem','Ivanti Neurons (MobileIron)','Ivanti',NULL,NULL, '["uem","mdm"]'::jsonb, '{"legacy":"MobileIron"}'::jsonb, true, now()),
    ('mdm_uem','Kandji','Kandji',NULL,NULL, '["mdm","apple"]'::jsonb, '{"focus":"Apple"}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c WHERE c.category_key=v.category_key AND c.name=v.name
);

-- EDR/XDR
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('edr_xdr','Microsoft Defender for Endpoint','Microsoft',NULL,NULL, '["edr","xdr"]'::jsonb, '{"suite":"M365 Defender"}'::jsonb, true, now()),
    ('edr_xdr','CrowdStrike Falcon','CrowdStrike',NULL,NULL, '["edr","xdr"]'::jsonb, '{"modules":["Prevent","Insight","Discover"]}'::jsonb, true, now()),
    ('edr_xdr','SentinelOne Singularity','SentinelOne',NULL,NULL, '["edr","xdr"]'::jsonb, '{"features":["Storyline","Ranger"]}'::jsonb, true, now()),
    ('edr_xdr','Sophos Intercept X','Sophos',NULL,NULL, '["edr"]'::jsonb, '{"integration":"XGS"}'::jsonb, true, now()),
    ('edr_xdr','Trellix Endpoint Security','Trellix',NULL,NULL, '["edr"]'::jsonb, '{"legacy":"McAfee"}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c WHERE c.category_key=v.category_key AND c.name=v.name
);

-- Identity Providers
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('idp','Okta Workforce Identity','Okta',NULL,NULL, '["idp","sso"]'::jsonb, '{"protocols":["OIDC","SAML"]}'::jsonb, true, now()),
    ('idp','Microsoft Entra ID (Azure AD)','Microsoft',NULL,NULL, '["idp","sso"]'::jsonb, '{"protocols":["OIDC","SAML"]}'::jsonb, true, now()),
    ('idp','PingFederate','Ping Identity',NULL,NULL, '["idp","federation"]'::jsonb, '{"protocols":["SAML","OIDC"]}'::jsonb, true, now()),
    ('idp','Auth0','Auth0',NULL,NULL, '["idp","sso"]'::jsonb, '{"protocols":["OIDC","SAML"]}'::jsonb, true, now()),
    ('idp','Google Workspace Identity','Google',NULL,NULL, '["idp","sso"]'::jsonb, '{"protocols":["OIDC","SAML"]}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c WHERE c.category_key=v.category_key AND c.name=v.name
);

-- SSO
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('sso','Okta SSO','Okta',NULL,NULL, '["sso"]'::jsonb, '{"protocols":["OIDC","SAML"]}'::jsonb, true, now()),
    ('sso','Azure AD SSO','Microsoft',NULL,NULL, '["sso"]'::jsonb, '{"protocols":["OIDC","SAML"]}'::jsonb, true, now()),
    ('sso','PingOne for Workforce','Ping Identity',NULL,NULL, '["sso"]'::jsonb, '{"protocols":["OIDC","SAML"]}'::jsonb, true, now()),
    ('sso','Auth0 Universal Login','Auth0',NULL,NULL, '["sso"]'::jsonb, '{"protocols":["OIDC","SAML"]}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c WHERE c.category_key=v.category_key AND c.name=v.name
);

-- Cloud Security
INSERT INTO public.catalog_items (category_key, name, vendor, model, firmware_version, tags, metadata, is_active, created_at)
SELECT * FROM (
  VALUES
    ('cloud_security','AWS IAM Identity Center','Amazon Web Services',NULL,NULL, '["cloud","identity"]'::jsonb, '{"cloud":"AWS"}'::jsonb, true, now()),
    ('cloud_security','AWS GuardDuty','Amazon Web Services',NULL,NULL, '["cloud","threat"]'::jsonb, '{"cloud":"AWS"}'::jsonb, true, now()),
    ('cloud_security','Microsoft Defender for Cloud','Microsoft',NULL,NULL, '["cloud","cspm"]'::jsonb, '{"cloud":"Azure"}'::jsonb, true, now()),
    ('cloud_security','Google Security Command Center','Google Cloud',NULL,NULL, '["cloud","cspm"]'::jsonb, '{"cloud":"GCP"}'::jsonb, true, now()),
    ('cloud_security','Palo Alto Prisma Cloud','Palo Alto Networks',NULL,NULL, '["cloud","cwp","cspm"]'::jsonb, '{"type":"SaaS"}'::jsonb, true, now()),
    ('cloud_security','Wiz','Wiz',NULL,NULL, '["cloud","cspm"]'::jsonb, '{"type":"SaaS"}'::jsonb, true, now())
) AS v(category_key,name,vendor,model,firmware_version,tags,metadata,is_active,created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.catalog_items c WHERE c.category_key=v.category_key AND c.name=v.name
);

-- 3) Industries
INSERT INTO public.industry_options (name, description, category, tags, is_active, created_at)
SELECT * FROM (
  VALUES
    ('Healthcare','Hospitals, clinics, life sciences','healthcare','["PHI","HIPAA"]'::jsonb, true, now()),
    ('Financial Services','Banking, insurance, fintech','finance','["PCI","SOX"]'::jsonb, true, now()),
    ('Education','K-12 and Higher Education','education','["FERPA","CIPA"]'::jsonb, true, now()),
    ('Government','Federal, State & Local','government','["FIPS","FedRAMP"]'::jsonb, true, now()),
    ('Retail','Retail & eCommerce','retail','["PCI","POS"]'::jsonb, true, now()),
    ('Manufacturing','Industrial & OT environments','manufacturing','["OT","IIoT"]'::jsonb, true, now()),
    ('Energy & Utilities','Oil/Gas, Power, Water','energy','["NERC","CIP"]'::jsonb, true, now()),
    ('Technology','SaaS and ISVs','technology','["SOC2","ISO27001"]'::jsonb, true, now())
) AS v(name, description, category, tags, is_active, created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.industry_options i WHERE i.name = v.name
);

-- 4) Compliance Frameworks
INSERT INTO public.compliance_frameworks (name, description, requirements, tags, is_active, created_at)
SELECT * FROM (
  VALUES
    ('HIPAA','Health Insurance Portability and Accountability Act','[]'::jsonb,'["healthcare","phi"]'::jsonb, true, now()),
    ('PCI DSS','Payment Card Industry Data Security Standard','[]'::jsonb,'["retail","payments"]'::jsonb, true, now()),
    ('GDPR','General Data Protection Regulation','[]'::jsonb,'["privacy","eu"]'::jsonb, true, now()),
    ('ISO/IEC 27001','Information Security Management','[]'::jsonb,'["isms"]'::jsonb, true, now()),
    ('SOC 2','Service Organization Controls Type 2','[]'::jsonb,'["saas","trust"]'::jsonb, true, now()),
    ('NIST 800-53','NIST Security and Privacy Controls','[]'::jsonb,'["federal","controls"]'::jsonb, true, now()),
    ('FedRAMP','US Federal cloud authorization','[]'::jsonb,'["federal","cloud"]'::jsonb, true, now()),
    ('CMMC','Cybersecurity Maturity Model Certification','[]'::jsonb,'["defense","dod"]'::jsonb, true, now())
) AS v(name, description, requirements, tags, is_active, created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.compliance_frameworks c WHERE c.name = v.name
);

-- 5) Deployment Types
INSERT INTO public.deployment_types (name, description, complexity_level, typical_timeline, tags, is_active, created_at)
SELECT * FROM (
  VALUES
    ('SMB','Single site, <200 users','low','2-4 weeks','["single-site","rapid"]'::jsonb, true, now()),
    ('Mid-Market','Multi-site, 200-1000 users','medium','4-8 weeks','["multi-site"]'::jsonb, true, now()),
    ('Enterprise','Global, 1000+ users','high','8-16 weeks','["global","complex"]'::jsonb, true, now())
) AS v(name, description, complexity_level, typical_timeline, tags, is_active, created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.deployment_types d WHERE d.name = v.name
);

-- 6) Project Phases
INSERT INTO public.project_phases (name, description, phase_order, success_criteria, tags, is_active, created_at)
SELECT * FROM (
  VALUES
    ('Discovery','Requirements and environment discovery',1,'[]'::jsonb,'["planning"]'::jsonb, true, now()),
    ('Design','High-level and detailed design',2,'[]'::jsonb,'["architecture"]'::jsonb, true, now()),
    ('Implementation','Configuration and integration',3,'[]'::jsonb,'["build"]'::jsonb, true, now()),
    ('Validation','Testing and UAT',4,'[]'::jsonb,'["test"]'::jsonb, true, now()),
    ('Go-Live','Production rollout',5,'[]'::jsonb,'["deploy"]'::jsonb, true, now()),
    ('Operate','Monitoring and optimization',6,'[]'::jsonb,'["operate"]'::jsonb, true, now())
) AS v(name, description, phase_order, success_criteria, tags, is_active, created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.project_phases p WHERE p.name = v.name
);

-- 7) Authentication Methods
INSERT INTO public.authentication_methods (name, method_type, description, security_level, configuration_complexity, tags, is_active, created_at)
SELECT * FROM (
  VALUES
    ('802.1X (EAP-TLS)','network','Certificate-based network access','high','medium','["wired","wireless","tls"]'::jsonb, true, now()),
    ('802.1X (PEAP-MSCHAPv2)','network','Password-based network access','medium','medium','["wired","wireless","peap"]'::jsonb, true, now()),
    ('MAC Authentication Bypass (MAB)','network','Device MAC fallback','low','low','["bypass"]'::jsonb, true, now()),
    ('SAML 2.0','federation','Federated authentication','high','medium','["idp","sso"]'::jsonb, true, now()),
    ('OpenID Connect (OIDC)','federation','Modern identity federation','high','medium','["idp","sso"]'::jsonb, true, now()),
    ('MFA (TOTP / Push)','mfa','Multi-factor authentication','high','medium','["mfa"]'::jsonb, true, now()),
    ('FIDO2 / WebAuthn','mfa','Phishing-resistant authentication','high','medium','["webauthn","fido2"]'::jsonb, true, now())
) AS v(name, method_type, description, security_level, configuration_complexity, tags, is_active, created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.authentication_methods a WHERE a.name = v.name
);

-- 8) Network Segments
INSERT INTO public.network_segments (name, segment_type, description, typical_size_range, tags, is_active, created_at)
SELECT * FROM (
  VALUES
    ('Campus Access','campus','User access layer','200-20000','["edge","802.1X"]'::jsonb, true, now()),
    ('Data Center','datacenter','Core and server networking','50-5000','["east-west","leaf-spine"]'::jsonb, true, now()),
    ('Branch Office','branch','Small remote office','10-500','["sd-wan","vpn"]'::jsonb, true, now()),
    ('Guest','guest','Isolated guest network','10-10000','["captive-portal","sponsor"]'::jsonb, true, now()),
    ('IoT','iot','Operational/IoT devices','50-100000','["profiling","segmentation"]'::jsonb, true, now()),
    ('OT/ICS','ot','Industrial control networks','10-5000','["ics","scada"]'::jsonb, true, now()),
    ('DMZ','dmz','Perimeter services','10-1000','["reverse-proxy","fw-zones"]'::jsonb, true, now())
) AS v(name, segment_type, description, typical_size_range, tags, is_active, created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.network_segments n WHERE n.name = v.name
);

-- 9) Pain Points
INSERT INTO public.pain_points_library (title, description, category, severity, recommended_solutions, industry_specific, created_at)
SELECT * FROM (
  VALUES
    ('Lack of device visibility','Unknown/rogue devices connecting to network','general','high','["802.1X","Profiling","Asset Inventory"]'::jsonb,'[]'::jsonb, now()),
    ('BYOD management challenges','Personal devices increase risk','access','medium','["Guest Access","Device Trust","MDM"]'::jsonb,'[]'::jsonb, now()),
    ('Compliance reporting','Difficulty meeting audit requirements','governance','medium','["Policy Enforcement","SIEM Integration"]'::jsonb,'[]'::jsonb, now()),
    ('IoT/OT segmentation','Flat networks expose critical systems','security','high','["Network Segmentation","Firewall Policies","NAC"]'::jsonb,'[]'::jsonb, now()),
    ('Certificate lifecycle','Managing device/user certs is complex','identity','medium','["EAP-TLS","Automated PKI","MDM"]'::jsonb,'[]'::jsonb, now())
) AS v(title, description, category, severity, recommended_solutions, industry_specific, created_at)
WHERE NOT EXISTS (
  SELECT 1 FROM public.pain_points_library p WHERE p.title = v.title
);
